getwd()
setwd("/Users/bbd5087/Box Sync/Strategic_Donors/")
netinf.results.files <- dir("./Data/results")
netinf.results.files
netinf.file <- "netinf_threshold_10_iter_7.RData"
# write
# load the netinf results
load(paste("./Data/results/",netinf.file,sep="")
)
netinf.file <- "netinf_threshold_10_iter_7.RData"
# write
# load the netinf results
load(paste("./Data/results/",netinf.file,sep=""))
ls()
# code assumes the working directory is set to 'Strategic_Donors'
netinf.results.files <- dir("./Data/results")
netinf.file <- "netinf_threshold_10_iter_7.RData"
# write
# load the netinf results
load(paste("./Data/results/",netinf.file,sep=""))
# load in vertex level data
vertex.data <- read.csv("./Data/influence_network_ergm/VLC_16_full.csv",stringsAsFactors=F)
## Zack's notes
# - activist - some secret model of “likelihood to take an action to advance a progressive cause”, so this may not be a good measure of general political activism; 0 - 100 (bins of 10; high values = higher activism relative to others, not a probability)
#- age - bins of 5 years
#- hhwealth - model of household total wealth, random bins
#- ideology - how liberal? 0 to 100 (bins of 5; 95-100 = most liberal)
#- income - individual income, random bins
#- partisanship - predicted probability of identifying as Dem, 0 - 100 (bins of 5)
#- pid - party ID, text
#- race - text
#These variable strings are pretty messy right now (e.g. weird characters, categorical variables), so I can change them to ordered numeric variables if you’d like - just let me know the best format for that.
# Extract vertex id
vertex.id <- as.character(vertex.data$Actor_ID)
# edgelist from netinf
donor.edgelist <- output$network
ls()
# load in vertex level data
vertex.data <- read.csv("./R_Code/influence_network_ergm/VLC_16_full.csv",stringsAsFactors=F)
# code assumes the working directory is set to 'Strategic_Donors'
netinf.results.files <- dir("./Data/results")
netinf.file <- "netinf_threshold_10_iter_7.RData"
# write
# load the netinf results
load(paste("./Data/results/",netinf.file,sep=""))
# load in vertex level data
vertex.data <- read.csv("./R_Code/influence_network_ergm/VLC_16_full.csv",stringsAsFactors=F)
## Zack's notes
# - activist - some secret model of “likelihood to take an action to advance a progressive cause”, so this may not be a good measure of general political activism; 0 - 100 (bins of 10; high values = higher activism relative to others, not a probability)
#- age - bins of 5 years
#- hhwealth - model of household total wealth, random bins
#- ideology - how liberal? 0 to 100 (bins of 5; 95-100 = most liberal)
#- income - individual income, random bins
#- partisanship - predicted probability of identifying as Dem, 0 - 100 (bins of 5)
#- pid - party ID, text
#- race - text
#These variable strings are pretty messy right now (e.g. weird characters, categorical variables), so I can change them to ordered numeric variables if you’d like - just let me know the best format for that.
# Extract vertex id
vertex.id <- as.character(vertex.data$Actor_ID)
# edgelist from netinf
donor.edgelist <- out$network
# node-level data for netinf
netinf.data <- out$data
# master list of nodes included in netinf
uniqueDonors <- unique(as.character(netinf.data$Donor_ID))
# throw out vertex data for nodes not included in the network
net.vertex.data <- vertex.data[which(is.element(vertex.id,uniqueDonors)),]
nrow(net.vertex.data)/length(uniqueDonors)
# looks like all nodes in the netinf data can be found in the vertex id data
# construct network object
library(network)
influence.network <- network.initialize(nrow(net.vertex.data))
network.vertex.names(influence.network) <- as.character(net.vertex.data$Actor_ID)
edges <- as.matrix(cbind(as.character(donor.edgelist[,1]),as.character(donor.edgelist[,2])))
network.ids <- as.character(net.vertex.data$Actor_ID)
for(i in 1:nrow(edges)){
sender <- which(network.ids==edges[i,1])
receiver <- which(network.ids==edges[i,2])
influence.network[sender,receiver] <- 1
if(i/500==round(i/500)) print(i)
}
rm(list="vertex.data")
save(list=c("influence.network","net.vertex.data"),file="influence.network.RData")
rm(list=ls())
gc()
donor.edgelist
donor.edgelist <- out$network
ls9
ls()
# code assumes the working directory is set to 'Strategic_Donors'
netinf.results.files <- dir("./Data/results")
netinf.file <- "netinf_threshold_10_iter_7.RData"
# write
# load the netinf results
load(paste("./Data/results/",netinf.file,sep=""))
# load in vertex level data
vertex.data <- read.csv("./R_Code/influence_network_ergm/VLC_16_full.csv",stringsAsFactors=F)
## Zack's notes
# - activist - some secret model of “likelihood to take an action to advance a progressive cause”, so this may not be a good measure of general political activism; 0 - 100 (bins of 10; high values = higher activism relative to others, not a probability)
#- age - bins of 5 years
#- hhwealth - model of household total wealth, random bins
#- ideology - how liberal? 0 to 100 (bins of 5; 95-100 = most liberal)
#- income - individual income, random bins
#- partisanship - predicted probability of identifying as Dem, 0 - 100 (bins of 5)
#- pid - party ID, text
#- race - text
#These variable strings are pretty messy right now (e.g. weird characters, categorical variables), so I can change them to ordered numeric variables if you’d like - just let me know the best format for that.
# Extract vertex id
vertex.id <- as.character(vertex.data$Actor_ID)
# edgelist from netinf
donor.edgelist <- out$network
# node-level data for netinf
netinf.data <- out$data
out$network
names(out)
# edgelist from netinf
donor.edgelist <- out$netinf_out$network
# node-level data for netinf
netinf.data <- out$netinf_out$data
dim(donor.edgelist)
donor.edgelist
names(out$netinf_out)
# edgelist from netinf
donor.edgelist <- cbind(out$netinf_out$origin_node,out$netinf_out$destination_node)
donor.edgelist
names(out$netinf_out)
names(out)
ls()
names(out)
names(netinf_out)
names(out$netinf_out)
setwd("/Users/bbd5087/Box\ Sync/Box/Research/donor_networks_netinf/Strategic_Donors")
ls
setwd("/Users/bbd5087/Box\ Sync/Box/Research/donor_networks_netinf/donation_diffusion/analysis")
devtools::install_github('desmarais-lab/NetworkInference')
library(tidyverse)
library(NetworkInference)
library(microbenchmark)
source('../data_processing/remove_isolates.R')
ls()
rm(list=ls())
devtools::install_github('desmarais-lab/NetworkInference')
library(tidyverse)
library(NetworkInference)
library(microbenchmark)
source('../data_processing/remove_isolates.R')
ls()
remove_isolates
install.packages("microbenchmark")
args = commandArgs(trailingOnly=TRUE)
isolate_threshold = as.integer(args[1])
init_params = 0.012
# Read the preprocessed data (see `make_netinf_data.R` for details)
cat('threshold: ', isolate_threshold, '\n')
df <- read_csv('../data/data_for_netinf.R')
df <- remove_isolates(df, isolate_threshold)
cat('Number of donors', length(unique(df$Donor_ID)), '\n')
df
df <- read_csv('../data/data_for_netinf.R')
df <- read_csv('../data/data_for_netinf.R')
df <- remove_isolates(df, isolate_threshold)
cat('Number of donors', length(unique(df$Donor_ID)), '\n')
args
isolate_threshold = 10
df <- read_csv('../data/data_for_netinf.R')
df <- remove_isolates(df, isolate_threshold)
cat('Number of donors', length(unique(df$Donor_ID)), '\n')
rm(list=ls())
# code assumes the working directory is set to 'donation_diffusion/analysis'
# and there is a sim link to the Strategic_Donors/Data folder
netinf.results.files <- dir("../data/results")
netinf.file <- "netinf_threshold_10_iter_7.RData"
source('../data_processing/remove_isolates.R')
# load the netinf results
load(paste("../data/results/",netinf.file,sep=""))
isolate_threshold = 10
# Read the preprocessed data (see `make_netinf_data.R` for details)
cat('threshold: ', isolate_threshold, '\n')
df <- read_csv('../data/data_for_netinf.R')
df <- remove_isolates(df, isolate_threshold)
cat('Number of donors', length(unique(df$Donor_ID)), '\n')
ls()
dim(df)
names(df)
# load in vertex level data
vertex.data <- read.csv("../2016_data_match/VLC_16_full.csv",stringsAsFactors=F)
dim(vertex.data)
#- hhwealth - model of household total wealth, random bins
#- ideology - how liberal? 0 to 100 (bins of 5; 95-100 = most liberal)
#- income - individual income, random bins
#- partisanship - predicted probability of identifying as Dem, 0 - 100 (bins of 5)
#- pid - party ID, text
#- race - text
#These variable strings are pretty messy right now (e.g. weird characters, categorical variables), so I can change them to ordered numeric variables if you’d like - just let me know the best format for that.
# Extract vertex id
vertex.id <- as.character(vertex.data$Actor_ID)
# edgelist from netinf
donor.edgelist <- cbind(out$netinf_out$origin_node,out$netinf_out$destination_node)
# node-level data for netinf
# netinf.data <- out$netinf_out$data
# master list of nodes included in netinf
# uniqueDonors <- unique(as.character(netinf.data$Donor_ID))
# the following assumes no isolates
uniqueDonors <- unique(df$Donor_ID)
# throw out vertex data for nodes not included in the network
net.vertex.data <- vertex.data[which(is.element(vertex.id,uniqueDonors)),]
nrow(net.vertex.data)/length(uniqueDonors)
# looks like all nodes in the netinf data can be found in the vertex id data
# construct network object
library(network)
influence.network <- network.initialize(nrow(net.vertex.data))
network.vertex.names(influence.network) <- as.character(net.vertex.data$Actor_ID)
edges <- as.matrix(cbind(as.character(donor.edgelist[,1]),as.character(donor.edgelist[,2])))
network.ids <- as.character(net.vertex.data$Actor_ID)
for(i in 1:nrow(edges)){
sender <- which(network.ids==edges[i,1])
receiver <- which(network.ids==edges[i,2])
influence.network[sender,receiver] <- 1
if(i/500==round(i/500)) print(i)
}
nrow(edges)
out$netinf_out$origin_node$p.val
out$netinf_out$p.val
names(out$netinf_out)
out$netinf_out$p_value
plot(out$netinf_out$p_value)
min(which(out$netinf_out$p_value < 0.05))
min(which(out$netinf_out$p_value > 0.05))
p.val <- 0.05
threshold <- 10
p.val <- 0.05
# code assumes the working directory is set to 'donation_diffusion/analysis'
# and there is a sim link to the Strategic_Donors/Data folder
# run in terminal, the following two lines
#  ln -s /Users/bbd5087/Box\ Sync/Box/Research/donor_networks_netinf/Strategic_Donors/2016_Data_Match  2016_data_match
#  ln -s /Users/bbd5087/Box\ Sync/Box/Research/donor_networks_netinf/Strategic_Donors/Data  data
netinf.results.files <- dir("../data/results")
netinf.file <- "netinf_threshold_10_iter_7.RData"
source('../data_processing/remove_isolates.R')
# load the netinf results
load(paste("../data/results/",netinf.file,sep=""))
isolate_threshold = 10
# Read the preprocessed data (see `make_netinf_data.R` for details)
cat('threshold: ', isolate_threshold, '\n')
df <- read_csv('../data/data_for_netinf.R')
df <- remove_isolates(df, isolate_threshold)
cat('Number of donors', length(unique(df$Donor_ID)), '\n')
# load in vertex level data
vertex.data <- read.csv("../2016_data_match/VLC_16_full.csv",stringsAsFactors=F)
## Zack's notes
# - activist - some secret model of “likelihood to take an action to advance a progressive cause”, so this may not be a good measure of general political activism; 0 - 100 (bins of 10; high values = higher activism relative to others, not a probability)
#- age - bins of 5 years
#- hhwealth - model of household total wealth, random bins
#- ideology - how liberal? 0 to 100 (bins of 5; 95-100 = most liberal)
#- income - individual income, random bins
#- partisanship - predicted probability of identifying as Dem, 0 - 100 (bins of 5)
#- pid - party ID, text
#- race - text
#These variable strings are pretty messy right now (e.g. weird characters, categorical variables), so I can change them to ordered numeric variables if you’d like - just let me know the best format for that.
# Extract vertex id
vertex.id <- as.character(vertex.data$Actor_ID)
# edgelist from netinf
donor.edgelist <- cbind(out$netinf_out$origin_node,out$netinf_out$destination_node)[1:min(which(out$netinf_out$p_value > p.val)),]
# node-level data for netinf
# netinf.data <- out$netinf_out$data
# master list of nodes included in netinf
# uniqueDonors <- unique(as.character(netinf.data$Donor_ID))
# the following assumes no isolates
uniqueDonors <- unique(df$Donor_ID)
# throw out vertex data for nodes not included in the network
net.vertex.data <- vertex.data[which(is.element(vertex.id,uniqueDonors)),]
nrow(net.vertex.data)/length(uniqueDonors)
# looks like all nodes in the netinf data can be found in the vertex id data
# construct network object
library(network)
influence.network <- network.initialize(nrow(net.vertex.data))
network.vertex.names(influence.network) <- as.character(net.vertex.data$Actor_ID)
edges <- as.matrix(cbind(as.character(donor.edgelist[,1]),as.character(donor.edgelist[,2])))
network.ids <- as.character(net.vertex.data$Actor_ID)
for(i in 1:nrow(edges)){
sender <- which(network.ids==edges[i,1])
receiver <- which(network.ids==edges[i,2])
influence.network[sender,receiver] <- 1
if(i/500==round(i/500)) print(i)
}
mean(influence.network[,])
netinf.results.files <- dir("../data/results")
netinf.results.files
file.parts <- strsplit(netinf.results.files,"_")
file.parts
file.parts <- do.call('rbind',strsplit(netinf.results.files,"_"))
file.parts
?grep
file.parts <- gsub(".RData","",netinf.results.files)
file.parts
file.parts <- do.call('rbind',strsplit(file.parts,"_"))
file.parts
?by
max.iters <- c(by(iteration,u.thresholds,max))
threshold <- as.numeric(file.parts[,3])
iteration <- as.numeric(file.parts[,5])
u.thresholds <- unique(threshold)
max.iters <- c(by(iteration,u.thresholds,max))
max.iters <- c(by(iteration,threshold,max))
max.iters
u.thresholds
netinf.results.files
max.iters
files.to.analyze <- paste("netinf_threshold_",names(max.iters),"_iter_",max.iters,".RData",sep="")
files.to.analyze
is.element(files.to.analyze,netinf.results.files)
thresholds <- as.numeric(names(max.iters))
thresholds
isolate_threshold <- as.numeric(strsplit(netinf.file,"_")[[3]])
strsplit(netinf.file, "_")
isolate_threshold <- as.numeric(strsplit(netinf.file,"_")[[1]][3])
isolate_threshold
ergm_results_file <- paste("ergm_results_threshold_",threshold,"_pval_",pval,".RData",sep="")
ergm_results_file <- paste("ergm_results_threshold_",threshold,"_pval_",p.val,".RData",sep="")
ergm_results_file
ergm_results_file <- paste("ergm_results_threshold_",isolate_threshold,"_pval_",p.val,".RData",sep="")
ergm_results_file
expand.grid(files.to.analyze,c(0.01,0.05,0.10,0.25))
expand.grid(files.to.analyze,c(0.01,0.05,0.10,0.25))[1,]
all.combinations <- expand.grid(files.to.analyze,all.p.val)
all.p.val <- c(0.01,0.05,0.10,0.25)
all.combinations <- expand.grid(files.to.analyze,all.p.val)
all.combinations
all.combinations <- paste(all.combinations[,1],"_",all_combinations[,2],sep="")
all.combinations <- expand.grid(files.to.analyze,all.p.val)
all.combinations <- paste(all.combinations[,1],"_",all_combinations[,2],sep="")
all.combinations <- paste(all.combinations[,1],"_",all.combinations[,2],sep="")
all.combinations
netinf.file_p.val <- all.combinations[1]
p.val <- as.numeric(strsplit(netinf.file_p.val,"_")[[1]][6])
p.val
netinf.file <- paste(strsplit(netinf.file_p.val,"_")[[1]][1:5],collapse="_")
netinf.file
getwd
getwd()
